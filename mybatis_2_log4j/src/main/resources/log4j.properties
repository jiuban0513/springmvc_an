# Global logging configuration
#文件中 “stdout” 这段配置的意思就是将 DEBUG 的日志信息输出到 stdout 参数所指定的输出载体中。
log4j.rootLogger=DEBUG, stdout
#设置名为 stdout 的输出端载体是哪种类型。
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
#设置名为 stdout 的输出载体的 layout（即界面布局）是哪种类型。
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
#如果 layout 界面布局选择了 PatternLayout 灵活布局类型，要指定的打印信息的具体格式。
log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n

#拓展知识：
#1.1：指的是日志输出级别，一共有 7 个级别（OFF、 FATAL、 ERROR[“错误级别”]、 WARN[“异常级别”]、 INFO[“标准信息级别” ]、 DEBUG[ “调试级别”]、 ALL）。
#1.2：在开发环境下日志级别要设置成 DEBUG ，生产环境设为 INFO 或 ERROR
#2.1：目前输出载体有：
#（1）ConsoleAppender（控制台）
#（2）FileAppender（文件）
#（3）DailyRollingFileAppender（每天产生一个日志文件）
#（4）RollingFileAppender（文件大小到达指定大小时产生一个新的文件）
#（5）WriterAppender（将日志信息以流格式发送到任意指定的地方）
#3.1：目前输出端的界面类型分为：
#（1）HTMLLayout（以 HTML 表格形式布局）
#（2）PatternLayout（可以灵活地指定布局模式）
#（3）SimpleLayout（包含日志信息的级别和信息字符串）
#（4）TTCCLayout（包含日志产生的时间、线程、类别等信息）
#4.1：格式信息配置元素大致如下：
#（1）%m 输出代码中的指定的信息
#（2）%p 输出优先级，即 DEBUG、 INFO、 WARN、 ERROR 和 FATAL
#（3）%r 输出自应用启动到输出该 log 信息耗费的毫秒数
#（4）%c 输出所属的类目，通常就是所在类的全名
#（5）%t 输出产生该日志事件的线程名
#（6）%n 输出一个回车换行符，Windows 平台为 “rn”，UNIX 平台为 “n”
#（7）%d 输出日志时的时间或日期，默认个事为 ISO8601，也可以在其后指定格式，比如 %d{yyy MMM dd HH:mm:ss}，输出类似：2018 年 4 月18 日 10:32:00
#（8）%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数
